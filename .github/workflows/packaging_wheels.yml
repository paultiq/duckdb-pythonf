name: Wheels packaging
on:
  workflow_call:
    inputs:
      minimal:
        type: boolean
        description: Build a minimal set of wheels to do a sanity check
        default: false
      testsuite:
        type: string
        description: Testsuite to run (none, fast, all)
        required: true
        default: all
      duckdb-python-sha:
        type: string
        description: The commit or ref to build against (defaults to latest commit of current ref)
        required: false
      duckdb-sha:
        type: string
        description: Override the DuckDB submodule commit or ref to build against
        required: false
      set-version:
        description: Force version (vX.Y.Z-((rc|post)N))
        required: false
        type: string

jobs:
  build_wheels:
    name: 'Wheel: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}'
    strategy:
      fail-fast: false
      matrix:
        python: [ cp314t ]  # cp39, cp310, cp311, cp312, cp314, cp314t 
        platform:
          #- { os: windows-2025,     arch: amd64,      cibw_system: win }
          - { os: ubuntu-24.04,     arch: x86_64,     cibw_system: manylinux }
          #- { os: ubuntu-24.04-arm, arch: aarch64,    cibw_system: manylinux }
          #- { os: macos-15,         arch: arm64,      cibw_system: macosx }
          #- { os: macos-15,         arch: universal2, cibw_system: macosx }
          #- { os: macos-13,         arch: x86_64,     cibw_system: macosx }
        minimal:
          - ${{ inputs.minimal }}
        exclude:
          - { minimal: true, python: cp310 }
          - { minimal: true, python: cp311 }
          - { minimal: true, python: cp312 }
          - { minimal: true, platform: { arch: universal2 } }
    runs-on: ${{ matrix.platform.os }}
    env:
      CIBW_TEST_SKIP: ${{ inputs.testsuite == 'none' && '*' || '*-macosx_universal2' }}
      CIBW_TEST_SOURCES: tests
      CIBW_BEFORE_TEST: >
        pwd && ls -la &&
        python --version && uv --version &&
        echo "uv export" &&
        uv export --only-group test --no-emit-project --output-file pylock.toml --directory /project --verbose 2>&1 || echo "Export failed with exit code $?" &&
        echo "listing file" &&
        ls -la pylock.toml 2>/dev/null || echo "pylock.toml not created" &&
        echo "done"
      CIBW_TEST_COMMAND: >
        uv run python -c "import duckdb"
      #uv run -v pytest ${{ inputs.testsuite == 'fast' && './tests/fast' || './tests' }} --verbose --ignore=./tests/stubs
      CCACHE_DIR: build/ccache-${{ matrix.python }}-${{ matrix.platform.arch }}
      CCACHE_MAXSIZE: 2G
   
    steps:
      - name: Checkout DuckDB Python
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.duckdb-python-sha }}
          fetch-depth: 0 
          submodules: true
      - name: Install ccache
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: ccache
          version: 1.0
      - name: Restore Build Cache
        uses: actions/cache/restore@v4
        with:
          path: |
            build/
            wheelhouse/
            build/ccache-${{ matrix.python }}-${{ matrix.platform.arch }}
          key: build-dir-${{ matrix.python }}-${{ runner.os }}
          restore-keys: |
            build-dir-${{ matrix.python }}-${{ runner.os }}-
      - name: Show ccache stats
        run: ccache -s
      - name: Checkout DuckDB
        shell: bash
        if: ${{ inputs.duckdb-sha }}
        run: |
          cd external/duckdb
          git fetch origin
          git checkout ${{ inputs.duckdb-sha }}

      # Make sure that OVERRIDE_GIT_DESCRIBE is propagated to cibuildwhel's env, also when it's running linux builds
      - name: Set OVERRIDE_GIT_DESCRIBE
        if: ${{ inputs.set-version != '' }}
        run: echo "CIBW_ENVIRONMENT=OVERRIDE_GIT_DESCRIBE=${{ inputs.set-version }} SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }}" >> $GITHUB_ENV
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{
            fromJSON('{"cp39":"3.9","cp310":"3.10","cp311":"3.11","cp312":"3.12","cp313":"3.13","cp314":"3.14","cp314t":"3.14t"}')[matrix.python]
            }}
          allow-prereleases: true
      # Install Astral UV, which will be used as build-frontend for cibuildwheel
      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.16"
          enable-cache: true
          cache-suffix: -${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          python-version: ${{
            fromJSON('{"cp39":"3.9","cp310":"3.10","cp311":"3.11","cp312":"3.12","cp313":"3.13","cp314":"3.14","cp314t":"3.14t"}')[matrix.python]
            }}

      - name: Verify Python version
        run: |
          expected="${{ fromJSON('{"cp39":"3.9","cp310":"3.10","cp311":"3.11","cp312":"3.12","cp313":"3.13","cp314":"3.14","cp314t":"3.14t"}')[matrix.python] }}"
          actual=$(python --version | cut -d' ' -f2)
          echo "Expected: $expected, Actual: $actual"
          if [[ "$expected" == "3.14t" && "$actual" =~ ^3\.14\. ]]; then
            echo "Python 3.14t version check passed"
          elif [[ "$actual" =~ ^$expected\. ]]; then
            echo "Python version check passed"
          else
            echo "Python version mismatch!"
            exit 1
          fi

      - name: Build${{ inputs.testsuite != 'none' && ' and test ' || ' ' }}wheels
        uses: pypa/cibuildwheel@v3.0
        env:
          CIBW_ARCHS: ${{ matrix.platform.arch == 'amd64' && 'AMD64' || matrix.platform.arch }}
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          CIBW_ENVIRONMENT: SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }} CCACHE_DIR=build/ccache-${{ matrix.python }}-${{ matrix.platform.arch }} CCACHE_MAXSIZE=2G
          CIBW_BEFORE_ALL_LINUX: |
            yum install -y ccache || apt-get update && apt-get install -y ccache
            mkdir -p build/ccache-${{ matrix.python }}-${{ matrix.platform.arch }}
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          path: wheelhouse/*.whl
          compression-level: 0
      - name: Save Build Cache
        if: always()  # Always save, even on failure
        uses: actions/cache/save@v4
        with:
          path: |
            build/
            wheelhouse/
            build/ccache-${{ matrix.python }}-${{ matrix.platform.arch }}
          key: build-dir-${{ matrix.python }}-${{ runner.os }}
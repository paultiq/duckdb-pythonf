name: Wheels packaging
on:
  workflow_call:
    inputs:
      minimal:
        type: boolean
        description: Build a minimal set of wheels to do a sanity check
        default: false
      testsuite:
        type: string
        description: Testsuite to run (none, fast, all)
        required: true
        default: all
      duckdb-python-sha:
        type: string
        description: The commit or ref to build against (defaults to latest commit of current ref)
        required: false
      duckdb-sha:
        type: string
        description: Override the DuckDB submodule commit or ref to build against
        required: false
      set-version:
        description: Force version (vX.Y.Z-((rc|post)N))
        required: false
        type: string

jobs:
  build_wheels:
    name: 'Wheel: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}'
    strategy:
      fail-fast: false
      matrix:
        python: [ cp313, cp314t ] # cp39, cp310, cp311, cp312, cp313, cp314, 
        platform:
          # - { os: windows-2025,     arch: amd64,      cibw_system: win }
          - { os: ubuntu-24.04,     arch: x86_64,     cibw_system: manylinux }
          # - { os: ubuntu-24.04-arm, arch: aarch64,    cibw_system: manylinux }
          # - { os: macos-15,         arch: arm64,      cibw_system: macosx }
          # - { os: macos-15,         arch: universal2, cibw_system: macosx }
          # - { os: macos-13,         arch: x86_64,     cibw_system: macosx }
        minimal:
          - ${{ inputs.minimal }}
        exclude:
          - { minimal: true, python: cp310 }
          - { minimal: true, python: cp311 }
          - { minimal: true, python: cp312 }
          - { minimal: true, platform: { arch: universal2 } }
          # Windows+cp314t disabled due to test failures in CI. 
          # TODO: Diagnose why tests fail (access violations) in some configurations
          - { python: cp314t, platform: { os: windows-2025 } }  

    runs-on: ${{ matrix.platform.os }}
    env:
      CIBW_TEST_SKIP: ${{ inputs.testsuite == 'none' && '*' || '*-macosx_universal2' }}
      CIBW_TEST_SOURCES: tests
      CIBW_BEFORE_TEST: >
        uv export --only-group test --no-emit-project --output-file pylock.toml --directory {project} &&
        uv pip install -r pylock.toml
      CIBW_TEST_COMMAND: >
        uv run -v pytest -n auto ${{ inputs.testsuite == 'fast' && './tests/fast' || './tests' }} --verbose --ignore=./tests/stubs
      SCCACHE_GHA_ENABLED: "on"
      SCCACHE_C_CUSTOM_CACHE_BUSTER: ${{ toJSON(matrix) }}
      ACTIONS_CACHE_SERVICE_V2: "1"  
      PYTHON_GIL: "1"  
    steps:
      - name: Checkout DuckDB Python
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.duckdb-python-sha }}
          fetch-depth: 0
          submodules: true
      - name: Checkout DuckDB
        shell: bash
        continue-on-error: true  # needed when we're merging into a branch
        if: ${{ inputs.duckdb-sha }}
        run: |
          cd external/duckdb
          git fetch origin
          git checkout ${{ inputs.duckdb-sha }}
      - name: Configure Cache Env
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      # Make sure that OVERRIDE_GIT_DESCRIBE is propagated to cibuildwhel's env, also when it's running linux builds
      - name: Set OVERRIDE_GIT_DESCRIBE
        shell: bash
        if: ${{ inputs.set-version != '' }}
        run: echo "CIBW_ENVIRONMENT=OVERRIDE_GIT_DESCRIBE=${{ inputs.set-version }}" >> $GITHUB_ENV

      # Install Astral UV, which will be used as build-frontend for cibuildwheel
      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.16"
          enable-cache: false
          activate-environment: true
          cache-suffix: -${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          python-version: ${{ matrix.python }}

      - name: Build${{ inputs.testsuite != 'none' && ' and test ' || ' ' }}wheels
        uses: pypa/cibuildwheel@v3.1
        env:
          CIBW_ARCHS: ${{ matrix.platform.arch == 'amd64' && 'AMD64' || matrix.platform.arch }}
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          # PYTHON_GIL=1: Suppresses the RuntimeWarning that the GIL is enabled on free-threaded builds. 
          # TODO: Remove PYTHON_GIL=1 when free-threaded is supported. 
          CIBW_ENVIRONMENT: PYTHON_GIL=1 CMAKE_C_COMPILER_LAUNCHER="" CMAKE_CXX_COMPILER_LAUNCHER="" 
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          path: wheelhouse/*.whl
          compression-level: 0

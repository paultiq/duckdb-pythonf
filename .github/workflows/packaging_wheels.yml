name: Wheels packaging
on:
  workflow_call:
    inputs:
      minimal:
        type: boolean
        description: Build a minimal set of wheels to do a sanity check
        default: false
      testsuite:
        type: string
        description: Testsuite to run (none, fast, all)
        required: true
        default: all
      duckdb-python-sha:
        type: string
        description: The commit or ref to build against (defaults to latest commit of current ref)
        required: false
      duckdb-sha:
        type: string
        description: Override the DuckDB submodule commit or ref to build against
        required: false
      set-version:
        description: Force version (vX.Y.Z-((rc|post)N))
        required: false
        type: string

jobs:
  build_wheels:
    name: 'Wheel: ${{ matrix.python }}-${{ matrix.platform.os }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}'
    strategy:
      fail-fast: false
      matrix:
        python: [ cp314t ] # cp39, cp310, cp311, cp312, cp313, cp314, 
        platform:
          - { os: windows-2025,     arch: amd64,      cibw_system: win }
          - { os: ubuntu-24.04,     arch: x86_64,     cibw_system: manylinux }
          # - { os: ubuntu-24.04-arm, arch: aarch64,    cibw_system: manylinux }
          #- { os: macos-15,         arch: arm64,      cibw_system: macosx }
          - { os: macos-26,         arch: arm64,      cibw_system: macosx }
          # - { os: macos-15,         arch: universal2, cibw_system: macosx }
          # - { os: macos-13,         arch: x86_64,     cibw_system: macosx }
        minimal:
          - ${{ inputs.minimal }}
        exclude:
          - { minimal: true, python: cp310 }
          - { minimal: true, python: cp311 }
          - { minimal: true, python: cp312 }
          - { minimal: true, platform: { arch: universal2 } }
          
    runs-on: ${{ matrix.platform.os }}
    env:
      CIBW_TEST_SKIP: ${{ inputs.testsuite == 'none' && '*' || '*-macosx_universal2' }}
      CIBW_TEST_SOURCES: tests
      CIBW_BEFORE_TEST_LINUX: >
        unset UV_NO_BUILD_ISOLATION &&
        sccache --show-stats &&
        uv export --only-group test --no-emit-project --output-file pylock.toml --directory {project} --quiet &&
        uv pip install -r pylock.toml
      CIBW_BEFORE_TEST_MACOS: >
        unset UV_NO_BUILD_ISOLATION &&
        sccache --show-stats &&
        uv export --only-group test --no-emit-project --output-file pylock.toml --directory {project} --quiet &&
        uv pip install -r pylock.toml
      CIBW_BEFORE_TEST_WINDOWS: >
        set UV_NO_BUILD_ISOLATION= &&
        sccache --show-stats &&
        uv export --only-group test --no-emit-project --output-file pylock.toml --directory {project} --quiet &&
        uv pip install -r pylock.toml
      CIBW_TEST_COMMAND: >
        uv run -v pytest ${{ inputs.testsuite == 'fast' && './tests/fast' || './tests' }} --verbose --ignore=./tests/stubs --durations=5 -n 2 &&
        uv run -v pytest ./tests/fast/threading --durations=5 --parallel-threads=10 --iterations=5 -n 2

      # sccache configuration with path normalization fixes
      SCCACHE_GHA_ENABLED: "on"
      SCCACHE_C_CUSTOM_CACHE_BUSTER: ${{ toJSON(matrix) }}
      SCCACHE_BASEDIR: "/project"
      ACTIONS_CACHE_SERVICE_V2: "1"

      # Fix random temp directories for consistent caching
      TMPDIR: "/tmp/duckdb-build"
      TEMP: "/tmp/duckdb-build"  
    steps:
      - name: Checkout DuckDB Python
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.duckdb-python-sha }}
          fetch-depth: 0
          submodules: true
      - name: Checkout DuckDB
        shell: bash
        continue-on-error: true  # needed when we're merging into a branch
        if: ${{ inputs.duckdb-sha }}
        run: |
          cd external/duckdb
          git fetch origin
          git checkout ${{ inputs.duckdb-sha }}
      - name: Configure Cache Env
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      # Make sure that OVERRIDE_GIT_DESCRIBE is propagated to cibuildwhel's env, also when it's running linux builds
      - name: Set OVERRIDE_GIT_DESCRIBE
        shell: bash
        if: ${{ inputs.set-version != '' }}
        run: echo "CIBW_ENVIRONMENT=OVERRIDE_GIT_DESCRIBE=${{ inputs.set-version }}" >> $GITHUB_ENV


      # Install Astral UV, which will be used as build-frontend for cibuildwheel
      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.16"
          enable-cache: false
          cache-suffix: -${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          python-version: ${{ matrix.python }}

      # Load MSVC environment, needed for Windows - ninja builds
      - uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.python == 'cp314t' && matrix.platform.cibw_system == 'win' }}
        with:
          arch: ${{ matrix.platform.arch }}

      - name: Build${{ inputs.testsuite != 'none' && ' and test ' || ' ' }}wheels
        uses: pypa/cibuildwheel@v3.1
        env:
          CIBW_ARCHS: ${{ matrix.platform.arch == 'amd64' && 'AMD64' || matrix.platform.arch }}
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          CIBW_BUILD_FRONTEND: "build[uv]; args: --no-isolation"
          UV_PYTHON: ${{ matrix.python }}
          UV_PROJECT_ENVIRONMENT: /project/.venv
          PYTHONPATH: /project
          # SCCACHE Notes:
          # - Without the /project dir and tmpdirs (not sure exactly which mattered), the python environment is installed to a random tmp dir, which breaks
          # the cache key... so, only the external/duckdb would cache, and not the project itself
          # - GHA cache is limited to 10GB LRU.
          # - SCCACHE_BASEDIR is not implemented in sccache (https://github.com/mozilla/sccache/issues/35)
          # - Using -fdebug-prefix-map/-fmacro-prefix-map for path normalization instead (Mozilla Firefox approach)
          # - Mozilla bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1524662 "Support gcc/clang-like build path prefix map"
          # - UV creates random build-env-* dirs causing cache misses (https://github.com/astral-sh/uv/issues/13096)
          # - Using --no-isolation to eliminate random UV build environments
          #
          # SCCACHE_LOG: trace
          # SCCACHE_LOG_LEVEL: trace
          # RUST_LOG: trace
          # SCCACHE_NO_DAEMON: "1"

          # no-build-isolation uses the same build-env path for each build, stable paths needed for caching
          CIBW_ENVIRONMENT: >
            CMAKE_C_COMPILER_LAUNCHER="" CMAKE_CXX_COMPILER_LAUNCHER=""
            CFLAGS="-Wno-attributes" CXXFLAGS="-Wno-attributes"
            SCCACHE_BASEDIR="/project"
            TMPDIR="/tmp/duckdb-build" TEMP="/tmp/duckdb-build"
            UV_NO_BUILD_ISOLATION=1 
            PYTHONPATH="/project"
            UV_CACHE_DIR="/tmp/duckdb-build/uv-cache"
            UV_PROJECT_ENVIRONMENT="/project/.venv"
            UV_PYTHON=cp314t
          CIBW_ENVIRONMENT_MACOS: >
            CMAKE_C_COMPILER_LAUNCHER="" CMAKE_CXX_COMPILER_LAUNCHER=""
            CFLAGS="-Wno-attributes" CXXFLAGS="-Wno-attributes"
            SCCACHE_BASEDIR="/tmp/project"
            TMPDIR="/tmp/duckdb-build" TEMP="/tmp/duckdb-build"
            UV_NO_BUILD_ISOLATION=1
            PYTHONPATH="/tmp/project"
            UV_CACHE_DIR="/tmp/duckdb-build/uv-cache"
            UV_PROJECT_ENVIRONMENT="/tmp/duckdb-build/.venv"
            UV_PYTHON=cp314t
          CIBW_ENVIRONMENT_WINDOWS: >
            CMAKE_BUILD_TYPE=Release CMAKE_C_COMPILER_LAUNCHER="" CMAKE_CXX_COMPILER_LAUNCHER=""
            CFLAGS="-Wno-attributes" CXXFLAGS="-Wno-attributes"
            SCCACHE_BASEDIR="C:/project"
            TMPDIR="C:/tmp/duckdb-build" TEMP="C:/tmp/duckdb-build"
            UV_NO_BUILD_ISOLATION=1
            PYTHONPATH="C:/project"
            UV_CACHE_DIR="C:/tmp/duckdb-build/uv-cache"
            UV_PROJECT_ENVIRONMENT="C:/project/.venv"
            UV_PYTHON=cp314t

          CIBW_ENVIRONMENT_PASS: SCCACHE_GHA_ENABLED ACTIONS_RUNTIME_TOKEN ACTIONS_RESULTS_URL ACTIONS_CACHE_SERVICE_V2 SCCACHE_C_CUSTOM_CACHE_BUSTER SCCACHE_LOG SCCACHE_LOG_LEVEL SCCACHE_NO_DAEMON RUST_LOG SCCACHE_BASEDIR TMPDIR TEMP PIP_CACHE_DIR UV_PYTHON UV_PROJECT_ENVIRONMENT PYTHONPATH UV_NO_BUILD_ISOLATION UV_CACHE_DIR

          # Use pyproject.toml settings - remove overrides to let pyproject.toml before-build work
          # Just install sccache since that's platform-specific and not in pyproject.toml
          CIBW_BEFORE_BUILD_LINUX: >
            mkdir -p /tmp/duckdb-build /tmp/pip-cache &&
            if [ "$(uname -m)" = "aarch64" ]; then ARCH=aarch64; else ARCH=x86_64; fi &&
            curl -L https://github.com/mozilla/sccache/releases/download/v0.10.0/sccache-v0.10.0-${ARCH}-unknown-linux-musl.tar.gz | tar xz &&
            cp sccache-v0.10.0-${ARCH}-unknown-linux-musl/sccache /usr/bin &&
            sccache --show-stats
          CIBW_BEFORE_BUILD_MACOS: >
            mkdir -p /tmp/duckdb-build /tmp/duckdb-build/uv-cache /tmp/pip-cache &&
            cp -r /project /tmp/project &&
            brew install sccache
          CIBW_BEFORE_BUILD_WINDOWS: >
            (mkdir "C:\tmp\duckdb-build" 2>nul & mkdir "C:\tmp\duckdb-build\uv-cache" 2>nul & mkdir "C:\tmp\pip-cache" 2>nul) &&
            del "C:\Strawberry\c\bin\ccache.exe" &&
            choco install sccache
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.python }}-${{ matrix.platform.os }}_${{ matrix.platform.arch }}
          path: wheelhouse/*.whl
          compression-level: 0

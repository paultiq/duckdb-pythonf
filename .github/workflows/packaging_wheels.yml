name: Wheels packaging
on:
  workflow_call:
    inputs:
      minimal:
        type: boolean
        description: Build a minimal set of wheels to do a sanity check
        default: false
      testsuite:
        type: string
        description: Testsuite to run (none, fast, all)
        required: true
        default: all
      duckdb-python-sha:
        type: string
        description: The commit or ref to build against (defaults to latest commit of current ref)
        required: false
      duckdb-sha:
        type: string
        description: Override the DuckDB submodule commit or ref to build against
        required: false
      set-version:
        description: Force version (vX.Y.Z-((rc|post)N))
        required: false
        type: string

jobs:
  build_wheels:
    name: 'Wheel: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}'
    permissions:
      actions: write  # For GitHub Actions cache write access
    strategy:
      fail-fast: false
      matrix:
        python: [ cp314t ]  # cp39, cp310, cp311, cp312, cp313, cp314, cp314t 
        platform:
          #- { os: self-hosted, arch: x86_64,     cibw_system: manylinux}
          - { os: windows-2025,     arch: amd64,      cibw_system: win }
          #- { os: ubuntu-24.04,     arch: x86_64,     cibw_system: manylinux }
          #- { os: ubuntu-24.04-arm, arch: aarch64,    cibw_system: manylinux }
          #- { os: macos-15,         arch: arm64,      cibw_system: macosx }
          #- { os: macos-15,         arch: universal2, cibw_system: macosx }
          #- { os: macos-13,         arch: x86_64,     cibw_system: macosx }
        minimal:
          - ${{ inputs.minimal }}
        exclude:
          - { minimal: true, python: cp310 }
          - { minimal: true, python: cp311 }
          - { minimal: true, python: cp312 }
          - { minimal: true, platform: { arch: universal2 } }
    runs-on: ${{ matrix.platform.os }}
    env:
      CIBW_TEST_SKIP: ${{ inputs.testsuite == 'none' && '*' || '*-macosx_universal2' }}
      CIBW_TEST_SOURCES: tests
      CIBW_BEFORE_TEST: >
        sccache --show-stats &&
        uv export --only-group test --no-emit-project --output-file pylock.toml --directory {project} &&
        uv pip install -r pylock.toml
      CIBW_TEST_COMMAND: >
        uv run -v pytest ${{ inputs.testsuite == 'fast' && './tests/fast' || './tests' }} --verbose --ignore=./tests/stubs 
      SCCACHE_GHA_ENABLED: "on"
      SCCACHE_C_CUSTOM_CACHE_BUSTER: ${{ toJSON(matrix) }}
      ACTIONS_CACHE_SERVICE_V2: "1"
      PYTHON_GIL: "1" 
    steps:
      - name: Checkout DuckDB Python
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.duckdb-python-sha }}
          fetch-depth: 0
          submodules: true
      # The host doesn't need sccache, only the cibuildwheel container
      # - name: Setup sccache  # idea from https://github.com/pypa/cibuildwheel/issues/1030
      #   uses: mozilla-actions/sccache-action@v0.0.9
      #   with:
      #     version: "v0.10.0"
      - name: Configure Cache Env
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Install System Dependencies (APT - Ubuntu/Debian)
        if: steps.detect-pm.outputs.package_manager == 'apt'
        run: |
          echo "Installing build dependencies with APT"
          sudo apt update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            pkg-config \
            libbz2-dev \
            libffi-dev \
            libgdbm-dev \
            libgdbm-compat-dev \
            liblzma-dev \
            libncurses5-dev \
            libreadline6-dev \
            libsqlite3-dev \
            libssl-dev \
            lzma \
            lzma-dev \
            tk-dev \
            uuid-dev \
            zlib1g-dev \
            clang \
            llvm
          echo "APT package installation completed"
      # - name: Cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ${{ runner.home }}/.cache/uv
      #     key: build-dir-${{ matrix.python }}-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}
      - name: Checkout DuckDB
        shell: bash
        if: ${{ inputs.duckdb-sha }}
        run: |
          cd external/duckdb
          git fetch origin
          git checkout ${{ inputs.duckdb-sha }}

      # Make sure that OVERRIDE_GIT_DESCRIBE is propagated to cibuildwhel's env, also when it's running linux builds
      - name: Set OVERRIDE_GIT_DESCRIBE
        if: ${{ inputs.set-version != '' }}
        run: echo "CIBW_ENVIRONMENT=OVERRIDE_GIT_DESCRIBE=${{ inputs.set-version }} SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }}" >> $GITHUB_ENV
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{
            fromJSON('{"cp39":"3.9","cp310":"3.10","cp311":"3.11","cp312":"3.12","cp313":"3.13","cp314":"3.14","cp314t":"3.14t"}')[matrix.python]
            }}
          allow-prereleases: true
      
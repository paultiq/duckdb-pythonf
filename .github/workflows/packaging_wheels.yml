name: Wheels packaging
on:
  workflow_call:
    inputs:
      minimal:
        type: boolean
        description: Build a minimal set of wheels to do a sanity check
        default: false
      testsuite:
        type: string
        description: Testsuite to run (none, fast, all)
        required: true
        default: all
      duckdb-python-sha:
        type: string
        description: The commit or ref to build against (defaults to latest commit of current ref)
        required: false
      duckdb-sha:
        type: string
        description: Override the DuckDB submodule commit or ref to build against
        required: false
      set-version:
        description: Force version (vX.Y.Z-((rc|post)N))
        required: false
        type: string

jobs:
  build_wheels:
    name: 'Wheel: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}'
    permissions:
      actions: write  # For GitHub Actions cache write access
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python: [ cp314t ]  # cp39, cp310, cp311, cp312, cp313, cp314, cp314t 
        platform:
          # - { os: self-hosted,     arch: x86_64,     cibw_system: manylinux }
          - { os: windows-2025,     arch: amd64,      cibw_system: win }
          #- { os: ubuntu-24.04,     arch: x86_64,     cibw_system: manylinux }
          # - { os: ubuntu-24.04-arm, arch: aarch64,    cibw_system: manylinux }
          # - { os: macos-15,         arch: arm64,      cibw_system: macosx }
          # - { os: macos-15,         arch: universal2, cibw_system: macosx }
          # - { os: macos-13,         arch: x86_64,     cibw_system: macosx }
        minimal:
          - ${{ inputs.minimal }}
        exclude:
          - { minimal: true, python: cp310 }
          - { minimal: true, python: cp311 }
          - { minimal: true, python: cp312 }
          - { minimal: true, platform: { arch: universal2 } }
    runs-on: ${{ matrix.platform.os }}
    env:
      CIBW_TEST_SKIP: ${{ inputs.testsuite == 'none' && '*' || '*-macosx_universal2' }}
      CIBW_TEST_SOURCES: tests
      CIBW_BEFORE_TEST: >
        uv export --only-group test --no-emit-project --output-file pylock.toml --directory {project} &&
        uv pip install -r pylock.toml
      CIBW_TEST_COMMAND: >
        sccache --show-stats && 
        uv run -v pytest -n auto ${{ inputs.testsuite == 'fast' && './tests/fast' || './tests' }} --verbose --ignore=./tests/stubs 
      SCCACHE_C_CUSTOM_CACHE_BUSTER: ${{ toJSON(matrix) }}
      PYTHON_GIL: "1"  
      # Needed for 3.14t to indicate that it's OK to enable the GIL. Noop for other versions.
    steps:
      - name: Setup S3 Cache
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      - name: Setup GHA Cache
        if: ${{ false }}
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
          # SCCACHE_GHA_ENABLED=on
          # ACTIONS_CACHE_SERVICE_V2: "1"  
          # SCCACHE_GHA_ENABLED: "on"
      - name: Checkout DuckDB Python
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.duckdb-python-sha }}
          fetch-depth: 0
          submodules: true
      # The host doesn't need sccache, only the cibuildwheel container
      # - name: Setup sccache  # idea from https://github.com/pypa/cibuildwheel/issues/1030
      #   uses: mozilla-actions/sccache-action@v0.0.9
      #   with:
      #     version: "v0.10.0"

      - name: Checkout DuckDB
        shell: bash
        if: ${{ inputs.duckdb-sha }}
        run: |
          cd external/duckdb
          git fetch origin
          git checkout ${{ inputs.duckdb-sha }}
      # Make sure that OVERRIDE_GIT_DESCRIBE is propagated to cibuildwhel's env, also when it's running linux builds
      - name: Set OVERRIDE_GIT_DESCRIBE
        if: ${{ inputs.set-version != '' }}
        run: echo "CIBW_ENVIRONMENT=OVERRIDE_GIT_DESCRIBE=${{ inputs.set-version }} SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }}" >> $GITHUB_ENV
      # Install Astral UV, which will be used as build-frontend for cibuildwheel
      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.16"
          enable-cache: true
          activate-environment: true
          cache-suffix: -${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          python-version: ${{ matrix.python }}
      - name: Install cibuildwheel
        run: |
          echo "Installed uv version is ${{ steps.setup-uv.outputs.uv-version }}"
          uv pip install cibuildwheel==3.1.4
      # - name: Setup D: Drive Cache and Temp (Windows)
      #   if: matrix.platform.cibw_system == 'win'
      #   shell: pwsh
      #   run: |
      #     if (Test-Path "D:\") {
      #       Write-Host "Setting up cibuildwheel cache and temp on D: drive"
      #       New-Item -ItemType Directory -Path "D:\cibw-cache" -Force
      #       New-Item -ItemType Directory -Path "D:\temp" -Force
      #       Write-Host "Created D:\cibw-cache and D:\temp directories"
      #     } else {
      #       Write-Host "D: drive not available, using default cache location"
      #     }
      # Load MSVC environment, needed for Windows - ninja builds
      - uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.platform.cibw_system == 'win' }}
        with:
          arch: ${{ matrix.platform.arch }}
      - name: Build${{ inputs.testsuite != 'none' && ' and test ' || ' ' }}wheels (Windows)
        if: matrix.platform.cibw_system == 'win'
        shell: cmd
        run: |
            uv run --no-sync python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS: ${{ matrix.platform.arch == 'amd64' && 'AMD64' || matrix.platform.arch }}
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          CIBW_ENVIRONMENT_WINDOWS: SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }} CMAKE_VERBOSE_MAKEFILE=ON CIBW_CACHE_PATH=D:\cibw-cache
          CIBW_ENVIRONMENT_PASS_WINDOWS: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_REGION AWS_DEFAULT_REGION PYTHON_GIL

          CIBW_BUILD_VERBOSITY: 3
          CIBW_CACHE_PATH: D:\cibw-cache
      - name: Build${{ inputs.testsuite != 'none' && ' and test ' || ' ' }}wheels (Non-Windows)
        if: matrix.platform.cibw_system != 'win'
        run: uv run --no-sync python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS: ${{ matrix.platform.arch == 'amd64' && 'AMD64' || matrix.platform.arch }}
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          # SCCACHE_LOG=debug SCCACHE_NO_DAEMON=1
          CIBW_ENVIRONMENT_LINUX: SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }} CMAKE_C_COMPILER_LAUNCHER="" CMAKE_CXX_COMPILER_LAUNCHER="" SCCACHE_BUCKET=${{ secrets.SCCACHE_BUCKET }} SCCACHE_REGION=${{ secrets.SCCACHE_REGION }}
          CIBW_ENVIRONMENT_PASS_LINUX: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_REGION AWS_DEFAULT_REGION PYTHON_GIL

          CIBW_ENVIRONMENT_MACOS: SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }} CMAKE_C_COMPILER_LAUNCHER="" CMAKE_CXX_COMPILER_LAUNCHER=""
          CIBW_ENVIRONMENT_PASS_MACOS: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_REGION AWS_DEFAULT_REGION PYTHON_GIL

          CIBW_ENVIRONMENT_WINDOWS: SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }} CMAKE_C_COMPILER_LAUNCHER="" CMAKE_CXX_COMPILER_LAUNCHER=""
          CIBW_ENVIRONMENT_PASS_WINDOWS: SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }} CMAKE_C_COMPILER_LAUNCHER="" CMAKE_CXX_COMPILER_LAUNCHER="" SCCACHE_BUCKET=${{ secrets.SCCACHE_BUCKET }} SCCACHE_REGION=${{ secrets.SCCACHE_REGION }}

          CIBW_BUILD_VERBOSITY: 3
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            sccache --show-stats
            auditwheel repair -w {dest_dir} {wheel}
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          path: wheelhouse/*.whl
          compression-level: 0
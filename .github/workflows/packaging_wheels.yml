name: Wheels packaging
on:
  workflow_call:
    inputs:
      minimal:
        type: boolean
        description: Build a minimal set of wheels to do a sanity check
        default: false
      testsuite:
        type: string
        description: Testsuite to run (none, fast, all)
        required: true
        default: all
      duckdb-python-sha:
        type: string
        description: The commit or ref to build against (defaults to latest commit of current ref)
        required: false
      duckdb-sha:
        type: string
        description: Override the DuckDB submodule commit or ref to build against
        required: false
      set-version:
        description: Force version (vX.Y.Z-((rc|post)N))
        required: false
        type: string

jobs:
  build_wheels:
    name: 'Wheel: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}'
    permissions:
      actions: write  # For GitHub Actions cache write access
    strategy:
      fail-fast: false
      matrix:
        python: [ cp314t ]  # cp39, cp310, cp311, cp312, cp314, cp314t 
        platform:
          - { os: self-hosted, arch: x86_64,     cibw_system: manylinux}
          #- { os: windows-2025,     arch: amd64,      cibw_system: win }
          #- { os: ubuntu-24.04,     arch: x86_64,     cibw_system: manylinux }
          #- { os: ubuntu-24.04-arm, arch: aarch64,    cibw_system: manylinux }
          #- { os: macos-15,         arch: arm64,      cibw_system: macosx }
          #- { os: macos-15,         arch: universal2, cibw_system: macosx }
          #- { os: macos-13,         arch: x86_64,     cibw_system: macosx }
        minimal:
          - ${{ inputs.minimal }}
        exclude:
          - { minimal: true, python: cp310 }
          - { minimal: true, python: cp311 }
          - { minimal: true, python: cp312 }
          - { minimal: true, platform: { arch: universal2 } }
    runs-on: ${{ matrix.platform.os }}
    env:
      CIBW_TEST_SKIP: ${{ inputs.testsuite == 'none' && '*' || '*-macosx_universal2' }}
      CIBW_TEST_SOURCES: tests
      CIBW_BEFORE_TEST: >
        uv export --only-group test --no-emit-project --output-file pylock.toml --directory {project} &&
        uv pip install -r pylock.toml
      CIBW_TEST_COMMAND: >
        uv run python -c "import duckdb"
      #uv run -v pytest ${{ inputs.testsuite == 'fast' && './tests/fast' || './tests' }} --verbose --ignore=./tests/stubs
      SCCACHE_GHA_ENABLED: "true"
    steps:
      - name: Checkout DuckDB Python
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.duckdb-python-sha }}
          fetch-depth: 0
          submodules: true
      - name: Setup sccache  # idea from https://github.com/pypa/cibuildwheel/issues/1030
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: "v0.10.0"
      
      - name: Configure sccache
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('SCCACHE_GHA_ENABLED', 'true');
            core.exportVariable('ACTIONS_RESULTS_URL', process.env.ACTIONS_RESULTS_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      
      - name: Install System Dependencies (APT - Ubuntu/Debian)
        if: steps.detect-pm.outputs.package_manager == 'apt'
        run: |
          echo "Installing build dependencies with APT"
          sudo apt update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            pkg-config \
            libbz2-dev \
            libffi-dev \
            libgdbm-dev \
            libgdbm-compat-dev \
            liblzma-dev \
            libncurses5-dev \
            libreadline6-dev \
            libsqlite3-dev \
            libssl-dev \
            lzma \
            lzma-dev \
            tk-dev \
            uuid-dev \
            zlib1g-dev \
            clang \
            llvm
          echo "APT package installation completed"

      - name: Test sccache on host
        run: |
          echo "Testing sccache GitHub Actions cache access on host..."
          sccache --start-server
          echo "Host environment variables:"
          echo "ACTIONS_RESULTS_URL: ${ACTIONS_RESULTS_URL}"
          echo "ACTIONS_RUNTIME_TOKEN: ${ACTIONS_RUNTIME_TOKEN:+SET}"
          echo "SCCACHE_GHA_ENABLED: ${SCCACHE_GHA_ENABLED}"
          echo "Initial sccache stats:"
          sccache --show-stats
          echo 'int main(){return 0;}' > test_host.c
          echo "Compiling test file with sccache on host..."
          SCCACHE_LOG=debug sccache gcc -c test_host.c -o test_host.o 2>&1 | head -20 || true
          echo "Final sccache stats on host:"
          sccache --show-stats
          rm -f test_host.c test_host.o
          echo "Host sccache test complete"
        env:
          SCCACHE_GHA_ENABLED: true
      - name: Restore Build Cache
        uses: actions/cache/restore@v4
        with:
          path: |
            build/
            wheelhouse/
            /home/runner/.cache/cibuildwheel
          key: build-dir-${{ matrix.python }}-${{ runner.os }}-
          restore-keys: |
            build-dir-${{ matrix.python }}-${{ runner.os }}-
      - name: Checkout DuckDB
        shell: bash
        if: ${{ inputs.duckdb-sha }}
        run: |
          cd external/duckdb
          git fetch origin
          git checkout ${{ inputs.duckdb-sha }}

      # Make sure that OVERRIDE_GIT_DESCRIBE is propagated to cibuildwhel's env, also when it's running linux builds
      - name: Set OVERRIDE_GIT_DESCRIBE
        if: ${{ inputs.set-version != '' }}
        run: echo "CIBW_ENVIRONMENT=OVERRIDE_GIT_DESCRIBE=${{ inputs.set-version }} SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }}" >> $GITHUB_ENV
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{
            fromJSON('{"cp39":"3.9","cp310":"3.10","cp311":"3.11","cp312":"3.12","cp313":"3.13","cp314":"3.14","cp314t":"3.14t"}')[matrix.python]
            }}
          allow-prereleases: true
      # Install Astral UV, which will be used as build-frontend for cibuildwheel
      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.16"
          enable-cache: false
          cache-suffix: -${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          python-version: ${{
            fromJSON('{"cp39":"3.9","cp310":"3.10","cp311":"3.11","cp312":"3.12","cp313":"3.13","cp314":"3.14","cp314t":"3.14t"}')[matrix.python]
            }}

      - name: Verify Python version
        run: |
          expected="${{ fromJSON('{"cp39":"3.9","cp310":"3.10","cp311":"3.11","cp312":"3.12","cp313":"3.13","cp314":"3.14","cp314t":"3.14t"}')[matrix.python] }}"
          actual=$(python --version | cut -d' ' -f2)
          echo "Expected: $expected, Actual: $actual"
          if [[ "$expected" == "3.14t" && "$actual" =~ ^3\.14\. ]]; then
            echo "Python 3.14t version check passed"
          elif [[ "$actual" =~ ^$expected\. ]]; then
            echo "Python version check passed"
          else
            echo "Python version mismatch!"
            exit 1
          fi

      - name: Debug Python paths
        run: |
          echo "Current python: $(which python)"
          echo "Python version: $(python --version)"
          echo "pythonLocation: $pythonLocation" 
          echo "Checking CIBW_TOOL_PYTHON path: /opt/hostedtoolcache/Python/3.14.0-rc.2/x64-freethreaded/bin/python"
          ls -la /opt/hostedtoolcache/Python/3.14.0-rc.2/x64-freethreaded/bin/python || echo "Path not found"
          
      - name: Debug CIBW_TOOL_PYTHON path
        run: |
          echo "pythonLocation: $pythonLocation"
          echo "Expected CIBW_TOOL_PYTHON: $pythonLocation/bin/python"
          ls -la "$pythonLocation/bin/python" || echo "Python not found at expected location"
          
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
        
      - name: Build${{ inputs.testsuite != 'none' && ' and test ' || ' ' }}wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS: ${{ matrix.platform.arch == 'amd64' && 'AMD64' || matrix.platform.arch }}
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          CIBW_ENVIRONMENT: SKBUILD_BUILD_DIR=build/${{ matrix.python }}-${{ matrix.platform.arch }} CMAKE_C_COMPILER_LAUNCHER="" CMAKE_CXX_COMPILER_LAUNCHER="" SCCACHE_GHA_ENABLED=true SCCACHE_C_CUSTOM_CACHE_BUSTER=${{ matrix.python }}-${{ matrix.platform.arch }} SCCACHE_LOG=debug
          CIBW_BUILD_VERBOSITY: 1
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            echo "Final sccache stats:"
            sccache --show-stats
            auditwheel repair -w {dest_dir} {wheel}
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.python }}-${{ matrix.platform.cibw_system }}_${{ matrix.platform.arch }}
          path: wheelhouse/*.whl
          compression-level: 0
      - name: Show final sccache stats
        if: always()
        run: |
          echo "Final sccache statistics on host:"
          sccache --show-stats || echo "sccache not available on host"
      - name: Save Build Cache
        if: always()  # Always save, even on failure
        uses: actions/cache/save@v4
        with:
          path: |
            build/
            wheelhouse/
            /home/runner/.cache/cibuildwheel
          key: build-dir-${{ matrix.python }}-${{ runner.os }}-e
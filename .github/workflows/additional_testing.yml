name: Stress Tests
on:
  push:

env:
  OS: ubuntu-24.04
  ARCH: x86_64
  CIBW_SYSTEM: manylinux
  PYTHON_VERSION: cp313
  TESTSUITE: fast
  ITERATIONS: 3



jobs:
  build:
    name: "Build wheel: cp313-manylinux_x86_64"
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout DuckDB Python
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true


      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.16"
          enable-cache: false
          cache-suffix: -${{ env.PYTHON_VERSION }}-${{ env.OS }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache ccache objects
        uses: actions/cache@v4
        with:
          path: ./wheelhouse/ccache
          key: ccache-${{ env.PYTHON_VERSION }}-${{ env.OS }}
          restore-keys: |
            ccache-${{ env.PYTHON_VERSION }}-${{ env.OS }}-


      - name: Export test requirements
        shell: bash
        run: |
          uv export --only-group test --no-emit-project --output-file test-requirements.txt --quiet

      - name: Prepare ccache directory
        shell: bash
        run: mkdir -p ./wheelhouse/ccache

      - name: Minimal build with ccache
        uses: pypa/cibuildwheel@v3.1
        with:
          output-dir: wheelhouse
        env:
          CIBW_ARCHS: ${{ env.ARCH }}
          CIBW_BUILD: ${{ env.PYTHON_VERSION }}-${{ env.CIBW_SYSTEM }}_${{ env.ARCH }}
          CIBW_TEST_SKIP: '*'
          # Minimal build configuration - use pyproject.toml override
          CIBW_ENVIRONMENT: >
            CCACHE_DIR={project}/wheelhouse/ccache
            CI_MINIMAL_BUILD=true
            CMAKE_BUILD_TYPE=MinSizeRel
            CMAKE_BUILD_PARALLEL_LEVEL=1
            CMAKE_CXX_FLAGS="-O1 -DNDEBUG"
            CMAKE_C_FLAGS="-O1 -DNDEBUG"
            CFLAGS="-Wno-attributes"
            CXXFLAGS="-Wno-attributes"
          CIBW_BEFORE_BUILD: >
            yum install -y ccache &&
            export PATH="/usr/lib64/ccache:$PATH" &&
            ccache --max-size=1G
          CIBW_AFTER_BUILD: >
            ls -la {project}/wheelhouse/ccache &&
            ccache -s &&

      - name: Upload test requirements
        uses: actions/upload-artifact@v4
        with:
          name: test-requirements-${{ env.PYTHON_VERSION }}-${{ env.CIBW_SYSTEM }}_${{ env.ARCH }}
          path: test-requirements.txt

      - name: Show ccache directory contents
        shell: bash
        run: |
          echo "Wheelhouse contents:"
          ls -la ./wheelhouse/ || echo "No wheelhouse directory found"
          echo ""
          echo "Ccache directory contents:"
          ls -la ./wheelhouse/ccache/ || echo "No ccache directory found"
          echo ""
          echo "Ccache backup directory contents:"
          ls -la ./wheelhouse/ccache-backup/ || echo "No ccache-backup directory found"
          echo ""
          echo "Ccache directory size:"
          du -sh ./wheelhouse/ccache/ || echo "No ccache directory found"
          echo "Ccache backup directory size:"
          du -sh ./wheelhouse/ccache-backup/ || echo "No ccache-backup directory found"

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ env.PYTHON_VERSION }}-${{ env.CIBW_SYSTEM }}_${{ env.ARCH }}
          path: wheelhouse/

  test:
    name: 'Test: ${{ matrix.pytest_config.name }} - cp313-manylinux_x86_64'
    runs-on: ubuntu-24.04
    needs: build
    strategy:
      fail-fast: false
      matrix:
        pytest_config:
          - name: "Random Order"  # randomization is automatic due to pytest-randomly
            args: ""
            iterations: 3
          - name: "Multiprocess"  # uses pytest-xdist
            args: "-n auto"
            iterations: 3
          - name: "Threaded"  # uses pytest-run-parallel
            # TODO: Update to use threading specific tests or explicitly mark unsafe tests. test_module was chosen as an example.
            args: "--parallel-threads=4 --iterations=8 tests/fast/test_module.py --ignore"
            iterations: 1

    steps:
      - name: Checkout test files only
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            tests
            pyproject.toml
          sparse-checkout-cone-mode: false

      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.16"
          enable-cache: true
          activate-environment: true
          cache-suffix: -${{ env.PYTHON_VERSION }}-${{ env.OS }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel-${{ env.PYTHON_VERSION }}-${{ env.CIBW_SYSTEM }}_${{ env.ARCH }}
          path: wheelhouse/

      - name: Download test requirements
        uses: actions/download-artifact@v4
        with:
          name: test-requirements-${{ env.PYTHON_VERSION }}-${{ env.CIBW_SYSTEM }}_${{ env.ARCH }}
          path: .

      - name: Install dependencies
        shell: bash
        run: |
          uv pip install wheelhouse/*.whl --no-deps --force-reinstall
          uv sync --no-install-project --no-build-isolation               
          rm -f pyproject.toml  # Remove project metadata to prevent build attempts

      - name: Run ${{ matrix.pytest_config.name }} tests
        shell: bash
        run: |
          TEST_TARGET="tests/fast"
          ITERATIONS="${{ matrix.pytest_config.iterations }}"
          PYTEST_ARGS="${{ matrix.pytest_config.args }}"

          echo "Running ${{ matrix.pytest_config.name }} pytest $ITERATIONS times against: $TEST_TARGET"
          for i in $(seq 1 $ITERATIONS); do
            echo ""
            echo "${{ matrix.pytest_config.name }} Run $i/$ITERATIONS:"
            echo "--------"
            uv run pytest $PYTEST_ARGS "$TEST_TARGET" --durations=5
            if [ $? -ne 0 ]; then
              echo "${{ matrix.pytest_config.name }} Run $i failed!"
            else
              echo "${{ matrix.pytest_config.name }} Run $i passed!"
            fi
          done
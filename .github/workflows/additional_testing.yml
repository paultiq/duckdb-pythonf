name: Stress Tests
on:
  push:

env:
  OS_TO_USE: ubuntu-24.04
  ARCH_TO_USE: x86_64
  CIBW_SYSTEM_TO_USE: manylinux
  PYTHON_VERSION_TO_USE: cp313
  TESTSUITE_TO_USE: fast
  ITERATIONS_TO_USE: 3



jobs:
  build:
    name: "Build wheel: ${{ env.PYTHON_VERSION_TO_USE }}-${{ env.CIBW_SYSTEM_TO_USE }}_${{ env.ARCH_TO_USE }}"
    runs-on: ${{ env.OS_TO_USE }}

    steps:
      - name: Checkout DuckDB Python
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.16"
          enable-cache: false
          cache-suffix: -${{ env.PYTHON_VERSION_TO_USE }}-${{ env.OS_TO_USE }}
          python-version: ${{ env.PYTHON_VERSION_TO_USE }}

      - name: Build wheel
        uses: pypa/cibuildwheel@v3.1
        env:
          CIBW_ARCHS: ${{ env.ARCH_TO_USE == 'amd64' && 'AMD64' || env.ARCH_TO_USE }}
          CIBW_BUILD: ${{ env.PYTHON_VERSION_TO_USE }}-${{ env.CIBW_SYSTEM_TO_USE }}_${{ env.ARCH_TO_USE }}
          CIBW_TEST_SKIP: '*'
          # Platform-specific ccache installation commands
          CIBW_BEFORE_BUILD_LINUX: ""
          CIBW_BEFORE_BUILD_MACOS: ""
          CIBW_BEFORE_BUILD_WINDOWS: "" 

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ env.PYTHON_VERSION_TO_USE }}-${{ env.CIBW_SYSTEM_TO_USE }}_${{ env.ARCH_TO_USE }}
          path: wheelhouse/

  test:
    name: 'Test: ${{ matrix.pytest_config.name }} - ${{ env.PYTHON_VERSION_TO_USE }}-${{ env.CIBW_SYSTEM_TO_USE }}_${{ env.ARCH_TO_USE }}'
    runs-on: ${{ env.OS_TO_USE }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        pytest_config:
          - name: "Random Order"  # randomization is automatic due to pytest-randomly
            args: ""
            iterations: 3
          - name: "Multiprocess"  # uses pytest-xdist
            args: "-n auto"
            iterations: 3
          - name: "Threaded"  # uses pytest-run-parallel
            # TODO: Update to use threading specific tests or explicitly mark unsafe tests. test_module was chosen as an example.
            args: "--parallel-threads=4 --iterations=8 tests/fast/test_module.py --ignore"
            iterations: 1

    steps:
      - name: Checkout DuckDB Python
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.16"
          enable-cache: false
          cache-suffix: -${{ env.PYTHON_VERSION_TO_USE }}-${{ env.OS_TO_USE }}
          python-version: ${{ env.PYTHON_VERSION_TO_USE }}

      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel-${{ env.PYTHON_VERSION_TO_USE }}-${{ env.CIBW_SYSTEM_TO_USE }}_${{ env.ARCH_TO_USE }}
          path: wheelhouse/

      - name: Install dependencies
        shell: bash
        run: |
          uv export --only-group test --no-emit-project --output-file pylock.toml
          uv pip install -r pylock.toml
          uv pip install wheelhouse/*.whl

      - name: Run ${{ matrix.pytest_config.name }} tests
        shell: bash
        run: |
          TEST_TARGET="tests/fast"
          ITERATIONS="${{ matrix.pytest_config.iterations }}"
          PYTEST_ARGS="${{ matrix.pytest_config.args }}"

          echo "Running ${{ matrix.pytest_config.name }} pytest $ITERATIONS times against: $TEST_TARGET"
          for i in $(seq 1 $ITERATIONS); do
            echo ""
            echo "${{ matrix.pytest_config.name }} Run $i/$ITERATIONS:"
            echo "--------"
            uv run pytest $PYTEST_ARGS "$TEST_TARGET" --durations=5
            if [ $? -ne 0 ]; then
              echo "${{ matrix.pytest_config.name }} Run $i failed!"
            else
              echo "${{ matrix.pytest_config.name }} Run $i passed!"
            fi
          done